// src/components/Buttons/Button.module.scss

// Base styles for the button
.button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--button-padding);
  border-radius: var(--button-border-radius);
  font-family: var(--font-family-primary);
  font-weight: var(--font-weight-bold);
  text-decoration: none;
  transition: var(--button-transition);
  box-shadow: var(--button-box-shadow);
  text-transform: uppercase;
  letter-spacing: 1px;
  cursor: pointer;
  text-align: center;
  white-space: nowrap;
  border: 2px solid;

  // Base hover/focus effects
  // We combine the :not(:disabled) pseudo-class with the [aria-disabled="true"] attribute selector
  &:hover:not(:disabled):not([aria-disabled="true"]),
  &:focus:not(:disabled):not([aria-disabled="true"]) {
    transform: translateY(-2px);
    box-shadow: var(--box-shadow-advanced);
  }

  /*  &:focus-visible {
    outline: 2px solid var(--color-brand-primary);
    outline-offset: 2px;
  } */

  // Disabled state handling for both native buttons and anchor tags/links
  &:disabled,
  &[aria-disabled="true"] {
    cursor: not-allowed;
    opacity: 0.6;
    // Anchor tags are still clickable even if 'disabled' via ARIA,
    // so in a real enterprise app we will use JavaScript to prevent 
    // the default behavior when aria-disabled is true.
  }
}

/* --- Size Modifiers --- */
.button--small {
  font-size: var(--font-size-sm);
}

.button--medium {
  min-width: 300px;
  min-height: 50px;
  font-size: var(--font-size-base);
}

.button--large {
  min-width: 400px;
  min-height: 65px;
  font-size: var(--font-size-lg);
}


/* --- Variant Modifiers --- */

.button--primary {
  background-color: var(--button-bg-primary);
  color: var(--button-text-primary);
  border-color: var(--button-text-primary);

  // Update hover/focus states to include the ARIA disabled check
  &:hover:not(:disabled):not([aria-disabled="true"]),
  &:focus:not(:disabled):not([aria-disabled="true"]) {
    background-color: var(--button-bg-primary-hover);
    color: var(--button-text-primary-hover);
    border-color: var(--button-text-primary-hover);
  }
}

.button--secondary {
  background-color: var(--button-bg-secondary);
  color: var(--button-text-secondary);
  border-color: var(--button-text-secondary);

  // Update hover/focus states to include the ARIA disabled check
  &:hover:not(:disabled):not([aria-disabled="true"]),
  &:focus:not(:disabled):not([aria-disabled="true"]) {
    background-color: var(--button-bg-secondary-hover);
    color: var(--button-text-secondary-hover);
    border-color: var(--button-text-secondary-hover);
  }
}

/* --- Tertiary Variant --- */
.button--tertiary {
  /* 
    The default tertiary style is the 'disabled' look (grey background, grey text).
    The 'enabled' (green) state is handled via a modifier class added by the 
    ContactForm.jsx component specifically when submission is possible.
  */
  background-color: var(--button-bg-tertiary);
  /* Grey background */
  color: var(--button-text-tertiary);
  /* Grey text */
  border-color: var(--button-bg-tertiary);
  /* Grey border */
  cursor: not-allowed;
  /* Default cursor for a disabled-looking button */
}